// apps/api/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// (Optional: falls ungenutzt, später entfernen)
enum Role {
  USER
  STAFF
  MANAGER
  ADMIN
}

// Wer verarbeitet die Zahlung?
enum PaymentProvider {
  STRIPE
  DUFFEL
  OTHER
}

enum UserRole {
  CUSTOMER
  ADMIN
  STAFF
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  password             String
  firstName            String?
  lastName             String?
  birthDate            DateTime?
  role                 UserRole  @default(CUSTOMER)
  isVerified           Boolean   @default(false)
  verificationToken    String?
  refreshToken         String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  orders Order[]

  @@index([email])
}

model Order {
  id                      String           @id @default(cuid())
  duffelId                String           @unique
  offerId                 String
  userId                  String
  status                  String?
  amount                  String
  currency                String
  owner                   String?
  liveMode                Boolean          @default(false)
  paymentProvider         PaymentProvider? // STRIPE | DUFFEL | OTHER
  paymentIntentId         String?          @unique // Stripe PI oder Duffel Payment-Ref
  paymentStatus           String? // freie Zeichenkette ("succeeded", "awaiting_payment", ...)
  paidAt                  DateTime? // Duffel: payment_status.paid_at
  awaitingPayment         Boolean? // Duffel: payment_status.awaiting_payment
  paymentRequiredBy       DateTime? // Duffel: payment_status.payment_required_by
  priceGuaranteeExpiresAt DateTime? // Duffel: payment_status.price_guarantee_expires_at

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  refunds           Refund[]
  OrderCancellation OrderCancellation[]

  lastEventType   String? // z.B. "order.updated"
  eticketReady    Boolean               @default(false)
  documents       Json? // komplette documents[] aus Duffel
  bookingRef      String? // PNR/Record Locator falls geliefert
  segments        Json? // kompaktes Segment-Array aus der Order
  passengers      Json? // Passagierdaten, falls du sie syncen willst
  tickets         TicketDocument[]      @relation("Order_TicketDocuments")
  scheduleChanges OrderScheduleChange[] @relation("Order_ScheduleChanges")

  @@index([userId])
  @@index([duffelId])
  @@index([offerId])
  @@index([paymentIntentId])
}

model OrderCancellation {
  id                   String    @id @default(cuid())
  duffelCancellationId String    @unique
  orderDuffelId        String
  refundAmount         String?
  refundCurrency       String?
  refundTo             String?
  expiresAt            DateTime?
  confirmedAt          DateTime?
  liveMode             Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order @relation(fields: [orderDuffelId], references: [duffelId], onDelete: Cascade, onUpdate: Cascade)

  @@index([orderDuffelId])
}

model Refund {
  id        String   @id @default(cuid())
  duffelId  String   @unique
  orderId   String
  amount    String
  currency  String
  status    String
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model WebhookEvent {
  /// Duffel Webhook Event ID (z.B. wev_...)
  id              String    @id
  type            String
  idempotencyKey  String?   @db.VarChar(100)
  apiVersion      String?   @default("v2")
  liveMode        Boolean   @default(false)
  createdAtRemote DateTime
  processedAt     DateTime?
  raw             Json

  createdAt DateTime @default(now())

  @@index([type])
  @@index([idempotencyKey])
}

model ProcessedKey {
  /// z.B. "order.updated|ord_abc123"
  key       String   @id
  createdAt DateTime @default(now())
}

model TicketDocument {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation("Order_TicketDocuments", fields: [orderId], references: [id], onDelete: Cascade)

  type      String
  uniqueId  String   @unique    // <-- hinzufügen
  url       String?
  createdAt DateTime @default(now())

  @@index([orderId])
}

model OrderScheduleChange {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation("Order_ScheduleChanges", fields: [orderId], references: [id], onDelete: Cascade)

  detectedAt DateTime @default(now())
  payload    Json
  resolved   Boolean  @default(false)
  note       String?

  @@index([orderId])
  @@index([resolved])
}
