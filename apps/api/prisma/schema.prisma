generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  password             String
  firstName            String?
  lastName             String?
  birthDate            DateTime?
  role                 UserRole  @default(CUSTOMER)
  isVerified           Boolean   @default(false)
  verificationToken    String?
  refreshToken         String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  orders               Order[]

  @@index([email])
}

model Order {
  id                      String                @id @default(cuid())
  duffelId                String                @unique
  offerId                 String
  userId                  String
  status                  String?
  amount                  String
  currency                String
  owner                   String?
  liveMode                Boolean               @default(false)
  paymentProvider         PaymentProvider?
  paymentIntentId         String?               @unique
  paymentStatus           String?
  paidAt                  DateTime?
  awaitingPayment         Boolean?
  paymentRequiredBy       DateTime?
  priceGuaranteeExpiresAt DateTime?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  lastEventType           String?
  eticketReady            Boolean               @default(false)
  documents               Json?
  bookingRef              String?
  segments                Json?
  passengers              Json?
  user                    User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderCancellation       OrderCancellation[]
  scheduleChanges         OrderScheduleChange[] @relation("Order_ScheduleChanges")
  refunds                 Refund[]
  tickets                 TicketDocument[]      @relation("Order_TicketDocuments")

  @@index([userId])
  @@index([duffelId])
  @@index([offerId])
  @@index([paymentIntentId])
}

model OrderCancellation {
  id                   String    @id @default(cuid())
  duffelCancellationId String    @unique
  orderDuffelId        String
  refundAmount         String?
  refundCurrency       String?
  refundTo             String?
  expiresAt            DateTime?
  confirmedAt          DateTime?
  liveMode             Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  order                Order     @relation(fields: [orderDuffelId], references: [duffelId], onDelete: Cascade)

  @@index([orderDuffelId])
}

model Refund {
  id        String   @id @default(cuid())
  duffelId  String   @unique
  orderId   String
  amount    String
  currency  String
  status    String
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model WebhookEvent {
  /// Duffel Webhook Event ID (z.B. wev_...)
  id              String    @id
  type            String
  idempotencyKey  String?   @db.VarChar(100)
  apiVersion      String?   @default("v2")
  liveMode        Boolean   @default(false)
  createdAtRemote DateTime
  processedAt     DateTime?
  raw             Json
  createdAt       DateTime  @default(now())

  @@index([type])
  @@index([idempotencyKey])
}

model ProcessedKey {
  /// z.B. "order.updated|ord_abc123"
  key       String   @id
  createdAt DateTime @default(now())
}

model TicketDocument {
  id        String   @id @default(cuid())
  orderId   String
  type      String
  uniqueId  String   @unique
  url       String?
  createdAt DateTime @default(now())
  order     Order    @relation("Order_TicketDocuments", fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model OrderScheduleChange {
  id         String   @id @default(cuid())
  orderId    String
  detectedAt DateTime @default(now())
  payload    Json
  resolved   Boolean  @default(false)
  note       String?
  order      Order    @relation("Order_ScheduleChanges", fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([resolved])
}

enum Role {
  USER
  STAFF
  MANAGER
  ADMIN
}

enum PaymentProvider {
  STRIPE
  DUFFEL
  OTHER
}

enum UserRole {
  CUSTOMER
  ADMIN
  STAFF
}
